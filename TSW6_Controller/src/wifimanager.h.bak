#pragma once
#define SETUP_BUTTON 15
#define STATUS_LED 2
#define DNS_PORT 53
#define USE_MINIDHCP 0          // ← MUSS 1 SEIN!
#define USE_CAPTIVE_PORTAL 1
#define USE_NETTRACE 0          // ← Deaktiviert für jetzt
#define USE_WILDCARD_DNS 0
#define USE_WILDCARD_HTTP 0

#include <WiFi.h>
#include <WebServer.h>
#include <DNSServer.h>
#include "ConfigStore.h"

#if USE_MINIDHCP
#include "MiniDHCP.h"
#endif

#if USE_CAPTIVE_PORTAL
#include "CaptivePortal.h"
#endif

#if USE_NETTRACE
#include "NetTrace.h"
NetTracer tracer;
#endif

WebServer server(80);
DNSServer dnsServer;
bool apMode = false;

// === Bootstrap HTML Builder ===
String buildHTML(String message = "")
{
    int n = WiFi.scanNetworks();
    String html;
    html.reserve(6000);

    html += F("<!DOCTYPE html><html lang='de'><head>");
    html += F("<meta charset='UTF-8'>");
    html += F("<meta name='viewport' content='width=device-width, initial-scale=1'>");
    html += F("<title>TSW Pico Setup</title>");

    html += F("<style>"
              "body{background:#f8f9fa;font-family:system-ui,Segoe UI,sans-serif;margin:0;padding:0;}"
              ".card{background:#fff;border-radius:.75rem;box-shadow:0 2px 8px rgba(0,0,0,.1);padding:1.25rem;}"
              ".form-label{font-weight:500;margin-top:.5rem;}"
              ".form-control,.form-select{width:100%;padding:.5rem;border:1px solid #ccc;border-radius:.5rem;}"
              ".btn{display:block;width:100%;padding:.6rem;margin-top:.75rem;border:none;border-radius:.5rem;font-size:1rem;}"
              ".btn-primary{background:#0d6efd;color:#fff;}"
              ".btn-outline-secondary{background:#fff;border:1px solid #ccc;color:#333;}"
              ".text-center{text-align:center;}"
              "</style>");

    html += F("<style>"
              "body{background:#f8f9fa;font-family:system-ui,Segoe UI,sans-serif;}"
              ".logo-container{text-align:center;margin-bottom:1rem;}"
              ".logo-container img{max-width:96px;height:auto;opacity:0.95;}"
              "</style></head><body><div class='container py-4'>");

    html += F("<div class='card shadow-sm mx-auto' style='max-width:420px;'>");
    html += F("<div class='card-body'>");

    // === LOGO ===
    html += F("<div class='logo-container'>");
    html += F("<img src='data:image/svg+xml;base64,");

    // === SVG-Datei aus Flash einlesen und Base64 encodieren ===
    File logo = LittleFS.open("/logo_Ole_TSW.svg", "r");
    if (logo)
    {
        static const char b64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        uint8_t in[3];
        int len;
        while ((len = logo.read(in, 3)) > 0)
        {
            for (int i = len; i < 3; i++)
                in[i] = 0;
            html += b64_table[in[0] >> 2];
            html += b64_table[((in[0] & 0x03) << 4) | (in[1] >> 4)];
            html += (len > 1) ? b64_table[((in[1] & 0x0F) << 2) | (in[2] >> 6)] : '=';
            html += (len > 2) ? b64_table[in[2] & 0x3F] : '=';
        }
        logo.close();
    }

    html += F("' alt='TSW Logo'></div>");
    html += F("<h4 class='text-center mb-4'>TSW Pico Setup</h4>");

    if (message.length())
    {
        html += "<div class='alert alert-info'>" + message + "</div>";
    }

    html += F("<form method='POST' action='/save'>");

    // WLAN SSID Dropdown
    html += F("<div class='mb-3'><label class='form-label'>WLAN auswählen</label>");
    html += F("<select class='form-select' name='ssid'>");
    for (int i = 0; i < n; i++)
    {
        html += String("<option value='") + WiFi.SSID(i) + "'>" + WiFi.SSID(i) + "</option>";
    }
    html += F("</select></div>");

    // Passwort
    html += F("<div class='mb-3'><label class='form-label'>Passwort</label>");
    html += F("<input type='password' class='form-control' name='pass' placeholder='WLAN-Passwort'></div>");

    // API Key
    html += F("<div class='mb-3'><label class='form-label'>TSW API Key</label>");
    html += F("<input type='text' class='form-control' name='api' placeholder='z.B. abcdef123456'></div>");

    html += F("<div class='d-grid gap-2'>");
    html += F("<button type='submit' class='btn btn-primary'>Speichern &amp; Neustarten</button>");
    html += F("<a href='/reboot' class='btn btn-outline-secondary'>Nur Neustart</a>");
    html += F("</div></form></div></div></div>");

    html += F("<script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js'></script>");
    html += F("</body></html>");

    return html;
}

// === Web Handlers ===
void handleRoot() { 
    Serial.println("[HTTP] GET / - Sende Setup-Seite");
    server.send(200, "text/html", buildHTML()); 
}

void handleSave()
{
    Serial.println("[HTTP] POST /save - Speichere Konfiguration");
    String ssid = server.arg("ssid");
    String pass = server.arg("pass");
    String api = server.arg("api");
    ssid.toCharArray(cfg.ssid, sizeof(cfg.ssid));
    pass.toCharArray(cfg.pass, sizeof(cfg.pass));
    api.toCharArray(cfg.apiKey, sizeof(cfg.apiKey));
    saveConfig();
    server.send(200, "text/html",
                "<div style='font-family:sans-serif;padding:1em;'>"
                "<h3>Gespeichert.</h3><p>Gerät startet neu...</p></div>");
    delay(1500);
    ESP.restart();

}

void handleReboot()
{
    Serial.println("[HTTP] GET /reboot - Starte neu");
    server.send(200, "text/html",
                "<div style='font-family:sans-serif;padding:1em;'>"
                "<h3>Neustart...</h3></div>");
    delay(500);
    ESP.restart();

}

// === Access Point Setup ===
void startAPMode()
{
    apMode = true;
    digitalWrite(STATUS_LED, LOW);
    WiFi.mode(WIFI_AP);

    Serial.println("\n=== STARTE ACCESS POINT ===");
    
    // SCHRITT 1: AP starten
    bool apStarted = WiFi.softAP("TSWPICO-Setup", "tswsetup", 6, false, 4);
    
    if (!apStarted) {
        Serial.println("FEHLER: AP-Start fehlgeschlagen!");
        delay(1000);
        ESP.restart();

    }
    
    Serial.println("AP gestartet, warte auf IP...");
    delay(500);

    // SCHRITT 2: IP konfigurieren
    IPAddress local_IP(192, 168, 4, 1);
    IPAddress gateway(192, 168, 4, 1);
    IPAddress subnet(255, 255, 255, 0);
    
    if (!WiFi.softAPConfig(local_IP, gateway, subnet)) {
        Serial.println("WARNUNG: softAPConfig fehlgeschlagen");
    }
    
    delay(1000);

    // SCHRITT 3: IP prüfen
    IPAddress apIP = WiFi.softAPIP();
    
    if (apIP == IPAddress(0,0,0,0)) {
        Serial.println("FEHLER: Keine IP erhalten!");
        // Versuche Default
        apIP = IPAddress(192, 168, 4, 1);
    }

    Serial.println("\n=== SETUP-MODUS AKTIV ===");
    Serial.printf("SSID: TSWPICO-Setup\n");
    Serial.printf("Passwort: tswsetup\n");
    Serial.printf("Kanal: 6\n");
    Serial.printf("IP: %s\n", apIP.toString().c_str());
    Serial.printf("MAC: %s\n", WiFi.softAPmacAddress().c_str());

#if USE_MINIDHCP
    Serial.println("\n=== STARTE MINI-DHCP ===");
    startMiniDHCP(apIP);
#else
    Serial.println("\nWARNUNG: MiniDHCP ist DEAKTIVIERT!");
    Serial.println("Clients werden KEINE IP-Adresse erhalten!");
#endif

    // DNS & Captive Portal
#if USE_CAPTIVE_PORTAL
    setupCaptivePortal(server, dnsServer, apIP);
#else
    dnsServer.start(DNS_PORT, "*", apIP);
    Serial.println("DNS-Server gestartet");
#endif

    // Webserver-Routen
    server.on("/", handleRoot);
    server.on("/save", HTTP_POST, handleSave);
    server.on("/reboot", handleReboot);

    server.begin();
    Serial.println("\nWebserver läuft auf http://192.168.4.1");
    Serial.println("Bereit für Verbindungen!\n");
}

// === Normalbetrieb ===
void startNormalMode()
{
    apMode = false;
    WiFi.mode(WIFI_STA);
    WiFi.begin(cfg.ssid, cfg.pass);
    digitalWrite(STATUS_LED, HIGH);
    Serial.print("Verbinde mit ");
    Serial.println(cfg.ssid);
    unsigned long start = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - start < 10000)
    {
        delay(500);
        Serial.print(".");
    }
    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.println("\nVerbunden!");
        Serial.print("IP: ");
        Serial.println(WiFi.localIP());

        server.on("/status", []() {
            String html = "<!DOCTYPE html><html><body>";
            html += "<h2>TSW Pico Status</h2>";
            html += "<p>SSID: " + String(cfg.ssid) + "</p>";
            html += "<p>IP: " + WiFi.localIP().toString() + "</p>";
            html += "<p>Signal: " + String(WiFi.RSSI()) + " dBm</p>";
            html += "</body></html>";
            server.send(200, "text/html", html);
        });
        server.begin();
    }
    else
    {
        Serial.println("\nFehler -> Fallback in AP-Modus");
        if (!apMode)
            startAPMode();
    }
}

// === Setup Decision ===
void beginWiFiManager()
{
    pinMode(SETUP_BUTTON, INPUT_PULLUP);
    pinMode(STATUS_LED, OUTPUT);

    bool setupPressed = (digitalRead(SETUP_BUTTON) == LOW);
    if (setupPressed)
    {
        startAPMode();
    }
    else if (loadConfig())
    {
        startNormalMode();
    }
    else
    {
        startAPMode();
    }
}

void loopWiFiManager()
{
    if (apMode)
    {
        dnsServer.processNextRequest();
        
#if USE_MINIDHCP
        handleMiniDHCP();
#endif
        
        static uint8_t lastClientCount = 0;
        static unsigned long lastStatusPrint = 0;
        uint8_t clients = WiFi.softAPgetStationNum();
        
        if (clients != lastClientCount) {
            Serial.printf("\n>>> Clients verbunden: %d\n", clients);
            lastClientCount = clients;
            lastStatusPrint = millis();
        }
        
        if (clients > 0 && millis() - lastStatusPrint > 10000) {
            lastStatusPrint = millis();
            Serial.println("\n=== HEARTBEAT ===");
            Serial.printf("Clients: %d | AP-IP: %s\n", clients, WiFi.softAPIP().toString().c_str());
        }
    }
    server.handleClient();
}